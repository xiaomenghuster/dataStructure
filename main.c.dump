/*writor:xiaomenghuster  date:summer
 *数据结构课程设计
 *五种字符串匹配算法
 *寻找所有匹配的字符串位置，没有则输出no find!
 *shift and 只能寻找32个字符以内的字符串，其他的最多为1000
*/
#include <stdio.h>
#include "myhead.h"
#include<stdlib.h>
#include<string.h>
#include<time.h>
long time_whole[6];  //总时间 bf,kmp,horspool,sunday,bm,shift

int findall=0;
long place;

int main(){
	int i;
	for(i=0;i<6;i++)
		time_whole[i]=0;  //记录累计时间的数组归零
	cost *cost_head,*cost_p,*temp;
	cost_head=(cost*)malloc(sizeof(cost));
	cost_p=(cost*)malloc(sizeof(cost));
	cost_head->next=cost_p;  //保存时间的链表
	char str[1000];  //最多可以传入1000个字符，但是其中Shift-And算法最多只能处理32个字符
	int strlength,test_times,test_times_save,steps,steps_save,choice,iof,num_node;
	long number,distance;
	node *head,*p;
	start();  //输出系统基本信息
	
	showiof();  //输出提示信息“何种测试类型”
	scanf("%d",&iof); 
	switch(iof){
		case 1:  
			/*show_asciikind();  //输出提示信息，“生成何种字符文件类型”
			printf("your choice: ");
			scanf("%d",&choice);*/

			choice=1;

			puts("How many character do you want to produce?");  //输入生成文件的大小
			scanf("%d",&number);

			puts("please input the number of node and the strlength:");  //需要寻找的结点树以及字符串长度
			scanf("%d %d",&num_node,&strlength);
			distance=number/num_node;  //计算步长

		    puts("please input the test times:");   //输入每个位置需要测试的次数
			scanf("%d",&test_times);
			test_times_save=test_times;   //保存test_times的数值

			/*show_findall(); //输出是寻找第一个还是寻找全部
			scanf("%d",&findall);*/

			while(num_node>0){
				place=number-(num_node-1)*distance-strlength; //得到指定位置
				temp=(cost*)malloc(sizeof(cost));
				temp->next=NULL;
				temp->effective=1;
				temp->place=place;
				while(test_times_save>0){   //使用test_time_save保存test_time的数值
					create(choice,number);  //形成字符集文件
					getstring(place,strlength,str);  //得到目标字符串
					puts("\nthe string: ");
					puts(str);   //显示字符串
					if(!(head=(node*)malloc(sizeof(node))))
						return ERROR;
					init(head);			//初始化双向链表 
					display(head,str,findall,temp);  //调用匹配函数并输出结果
					puts("");
					test_times_save--;
				}
				showresult(test_times,temp);
				cost_p->next=temp;
				cost_p=temp;
				for(i=0;i<6;i++)
					time_whole[i]=0;  //重新归零
				num_node--;
				test_times_save=test_times;
			}
			//运行结束，打印各个算法对各个位置字符串匹配成功所花费的时间
			puts("");
			puts("the time:");
			puts("\tbf\t   kmp\t      horspool\t sunday\t     bm\t\tshift");   
			cost_p=cost_head->next->next; 
			int j=1;
			while(cost_p!=NULL){
				//等于一表示的确是在指定位置找到的字符串，而不是在那之前的位置找到的
				printf("%d. ", j);
				if(cost_p->effective==1){
					printf("\t%f   ",cost_p->time_bf/1000000.0 );
					printf("%f   ",cost_p->time_kmp/1000000.0 );
					printf("%f   ",cost_p->time_horspool/1000000.0 );
					printf("%f   ",cost_p->time_sunday/1000000.0 );
					printf("%f   ",cost_p->time_bm/1000000.0 );
					printf("%f   ",cost_p->time_shift/1000000.0 );
					puts("");
				}
				else 
					puts("\tnone effective!");
				//printf("%d\n",cost_p->place );  //检测是否成功建立链表
				j++;
				cost_p=cost_p->next;	
				// printf("%d\n",cost_p->effective_bf );
			}
			break;
		case 2:    
			/*puts("please input the string:");
			scanf("%s",str);*/
			// test_times=1;
			/*show_findall();
			scanf("%d",&findall);*/
			puts("How many character do you want to produce?");  //输入生成文件的大小
			scanf("%d",&number);

			/*puts("please input the strlength:");  //需要寻找的结点树以及字符串长度
			scanf("%d",&strlength);*/
			puts("the default strlength is 30");
			strlength=30;

		    puts("please input the steps:");   //输入每个位置需要测试的次数
			scanf("%d",&steps);
			steps_save=steps;   //保存test_times的数值

			show_asciikind();
			scanf("%d",&choice);

			switch(choice){
				case 2:  //bf算法的最好最坏情况
					while(steps>0){   
						place=number-strlength;

						temp=(cost*)malloc(sizeof(cost));
						temp->next=NULL;
						temp->effective=1;
						temp->place=place;      //生成一个链表记录信息

						create(choice,number);  //形成字符集文件
						getstring(place,strlength,str);  //得到目标字符串
						puts("\nthe string: ");
						puts(str);   //显示字符串

						if(!(head=(node*)malloc(sizeof(node))))
							return ERROR;
						init(head);			//初始化双向链表 
						display(head,str,findall,temp);  //调用匹配函数
						puts("");
						showresult(1,temp);
						cost_p->next=temp;
						cost_p=temp;
						for(i=0;i<6;i++)
							time_whole[i]=0;  //重新归零
						//运行结束，打印花费的时间
						steps--;
						strlength+=10;
					}
					break;
				case 3:   //kmp和bm算法的最好最坏情况
					steps=4;
					while(steps>0){   
						place=number-strlength;

						temp=(cost*)malloc(sizeof(cost));
						temp->next=NULL;
						temp->effective=1;
						temp->place=place;      //生成一个链表记录信息
						create_kmp(choice,number,steps,strlength);  //形成字符集文件
						getstring(place,strlength,str);  //得到目标字符串
						puts("\nthe string: ");
						puts(str);   //显示字符串

						if(!(head=(node*)malloc(sizeof(node))))
							return ERROR;
						init(head);			//初始化双向链表 
						display(head,str,findall,temp);  //调用匹配函数
						puts("");
						showresult(1,temp);
						cost_p->next=temp;
						cost_p=temp;
						for(i=0;i<6;i++)
							time_whole[i]=0;  //重新归零
						//运行结束，打印花费的时间
						steps--;
						// strlength+=10;
					}
					break;
				case 4:  //horspool和sunday的最好最坏情况
					steps=4;
					while(steps>0){   
						place=number-strlength;

						temp=(cost*)malloc(sizeof(cost));
						temp->next=NULL;
						temp->effective=1;
						temp->place=place;      //生成一个链表记录信息
						create_kmp(choice,number,steps,strlength);  //形成字符集文件
						getstring(place,strlength,str);  //得到目标字符串
						puts("\nthe string: ");
						puts(str);   //显示字符串

						if(!(head=(node*)malloc(sizeof(node))))
							return ERROR;
						init(head);			//初始化双向链表 
						display(head,str,findall,temp);  //调用匹配函数
						puts("");
						showresult(1,temp);
						cost_p->next=temp;
						cost_p=temp;
						for(i=0;i<6;i++)
							time_whole[i]=0;  //重新归零
						//运行结束，打印花费的时间
						steps--;
						// strlength+=10;
					}
					break;
				case 5:  //shift的最好最坏情况
					steps=4;
					while(steps>0){   
						place=number-strlength;

						temp=(cost*)malloc(sizeof(cost));
						temp->next=NULL;
						temp->effective=1;
						temp->place=place;      //生成一个链表记录信息
						create_kmp(choice,number,steps,strlength);  //形成字符集文件
						getstring(place,strlength,str);  //得到目标字符串
						puts("\nthe string: ");
						puts(str);   //显示字符串

						if(!(head=(node*)malloc(sizeof(node))))
							return ERROR;
						init(head);			//初始化双向链表 
						display(head,str,findall,temp);  //调用匹配函数
						puts("");
						showresult(1,temp);
						cost_p->next=temp;
						cost_p=temp;
						for(i=0;i<6;i++)
							time_whole[i]=0;  //重新归零
						//运行结束，打印花费的时间
						steps--;
						// strlength+=10;
					}
					break;
				default: break;

			}
			
			//运行结束，打印花费的时间
			puts("");
			puts("the time:");
			puts("算法最好最差情况的对比：");   
			cost_p=cost_head->next->next; 
			while(cost_p!=NULL){
				//等于一表示的确是在指定位置找到的字符串，而不是在那之前的位置找到的
				if(cost_p->effective==1){
					switch(choice){
						case 2: printf("\tkmp:%f   ",cost_p->time_bf/1000000.0 );break;
						case 3: 
							printf("\tkmp:%f   bm:%f",cost_p->time_kmp/1000000.0,cost_p->time_bm/1000000.0 );break;
						case 4: printf("\thorspool:%f   sunday:%f",cost_p->time_horspool/1000000.0,cost_p->time_sunday );break;
						case 5: printf("\tshift:%f   ",cost_p->time_shift/1000000.0 );break;
						default: break;
					}
					puts("");
				}
				else 
					puts("\tnone effective!");
				//printf("%d\n",cost_p->place );  //检测是否成功建立链表
				j++;
				cost_p=cost_p->next;	
				// printf("%d\n",cost_p->effective_bf );
			}
			break;
		default: break;
	}

	
	
}

void start(){
	printf(" ------------------------------------------\n");
	printf("| This the string-match algorithm!         |\n");
	printf("| Auther:xiaomeng                          |\n");
	printf("| Date:2015.9.21                           |\n");
	printf("|-----------all right reserve--------------|\n");
	puts("");
}

void showiof(){
	printf("-------------------------------------------------------\n");
	printf("|  选择测试类型:                                      |\n");
	printf("| 1:自动选点测试不同位置匹配速度  2:测试最好最坏情况  |\n"); 
	printf("-------------------------------------------------------\n");
}

void show_asciikind(){
	printf("----------------------------------------------------------\n");
	printf("|  测试什么匹配算法的最好最坏情况？                      |\n");
	printf("| 2:Brute Force  3:KMP/BM  4:Horspool/Sunday 5:Shift-And |\n"); 
	printf("----------------------------------------------------------\n");
}

void show_findall(){
	printf("---------------\n");
	printf("|  find all?  |\n");
	printf("| 1:yes  0:no |\n"); 
	printf("---------------\n");
}

void create(int choice,long number){
	char c;
	int kind;
	long i=0;
	FILE* fout= fopen(CONTENTFILE,"w");
	while(i<number){
		switch(choice){
			case 1:
				c=(rand()%9)%2+'0';   //产生随机的01文件而不是伪随机的01文件
				//putchar(c);
				fputc(c,fout);
				break;
			case 2:
				c='a';  //生成大量重复的字符，增加匹配所需要的时间
				if(i==number-2)
					c='b';
				// putchar(c);
				fputc(c,fout);
				break;
			case 3:
				c=rand()%93+33;  //随机生成ascii码中可以显示的所有字符
				// putchar(c);
				fputc(c,fout);
				if(i==number-2)
					c='d';
				break;
			case 4:
				kind=rand()%3+1;
				switch(kind){
					case 1:
						c=rand()%10+'0';
						break;
					case 2:
						c=rand()%26+'a';
						break;
					case 3:
						c=rand()%26+'A';
						break;
					default:
						break;
				}
				fputc(c,fout);
				break;
			case 5:
				c=rand()%93+33;  //随机生成ascii码中可以显示的所有字符
				// putchar(c);
				fputc(c,fout);
				break;
			default:
				break;
		}
		/*if(!(i%10000))
			fputc('\n',fout);*/
		i++;
	}
	fclose(fout);
}

void create_kmp(int choice,long number,int steps,int strlength){
	char c='a';
	int kind;
	long i=0;
	FILE* fout= fopen(CONTENTFILE,"w");
	while(i<number){
		switch(steps){
			case 1:
				c=(rand()%9)%2+'0';   //产生随机的01文件而不是伪随机的01文件
				//putchar(c);
				fputc(c,fout);
				break;
			case 2:
				kind=rand()%3+1;
				switch(kind){
					case 1:
						c=rand()%10+'0';
						break;
					case 2:
						c=rand()%26+'a';
						break;
					case 3:
						c=rand()%26+'A';
						break;
					default: break;
				}
				fputc(c,fout);
				break;
			case 3:
				c=rand()%26+'a';  //随机生成ascii码中可以显示的所有字符
				// putchar(c);
				fputc(c,fout);
				break;
			case 4:
				if(c=='e')
					c='a';
				fputc(c,fout);
				c++;
				break;
			default:
				break;
		}
		i++;
		if(i==number-2){
			c='/';
			fputc(c,fout);
		}
	}
	fclose(fout);
}

void getstring(long place,int strlength,char* str){
	FILE *fin;
	int i=0;
	char c;
	fin=fopen(CONTENTFILE,"r");
	while(place>1){
		fgetc(fin);
		place--;
	}
	while(i<strlength){
		c=fgetc(fin);
		str[i]=c;
		i++;
	}
	str[strlength]='\0';

}

int init(node* head){
	head->pre=NULL;
	long length=0;
	node *h=head,*p;
	FILE *fin;
	fin=fopen(CONTENTFILE,"r");
	char c;
	while(!feof(fin)){
		length++;
		c=fgetc(fin);
		if(!(p=(node*)malloc(sizeof(node))))
			return ERROR;
		p->ch=c; 
		h->next=p;
		p->pre=h;  //个别匹配算法需要双向链表
		h=p;
		//putchar(c);
	}
	h->next=NULL;
} 

void show(node* h){   //显示双向链表，测试生成情况
	h=h->next;
	while(h->next!=NULL){
		putchar(h->ch);
		h=h->next;
	}
	/* while(h->pre!=NULL){
		putchar(h->ch);
		h=h->pre;
	} */
}

void display(node* head,char* str,int findall,cost *cost_p){
	struct timeval start,end;
	long bf_time,kmp_time,Horspool_time,Sunday_time,bm_time,shift_time;
	puts("finding results:");
	
	printf("%s","Brute Force\t| ");
	gettimeofday(&start,NULL);  //得到开始时间
	match_1(head,str,0,findall,cost_p);
	gettimeofday(&end,NULL);  //得到结束时间
	bf_time=1000000*(end.sec-start.sec)+end.usec-start.usec;  //计算经过的时间
	//printf("%f",timeuse/1000000.0);
	time_whole[0]+=bf_time;  //时间累加
	puts("");					//换行
	puts("");

	printf("%s","KMP\t\t| ");
	gettimeofday(&start,NULL);  //得到开始时间
	match_2(head,str,0,findall);
	gettimeofday(&end,NULL);  //得到结束时间
	kmp_time=1000000*(end.sec-start.sec)+end.usec-start.usec;  //计算经过的时间
	// printf("%f",timeuse/1000000.0);
	time_whole[1]+=kmp_time;
	puts("");
	puts("");					//换行

	printf("%s","Horspool\t| ");
	gettimeofday(&start,NULL);
	match_3(head,str,0,findall);
	gettimeofday(&end,NULL);  //得到结束时间
	Horspool_time=1000000*(end.sec-start.sec)+end.usec-start.usec;  //计算经过的时间
	// printf("%f",timeuse/1000000.0);
	time_whole[2]+=Horspool_time;
	puts("");
	puts("");

	printf("%s","Sunday\t\t| ");
	gettimeofday(&start,NULL);
	match_4(head,str,0,findall);
	gettimeofday(&end,NULL);  //得到结束时间
	Sunday_time=1000000*(end.sec-start.sec)+end.usec-start.usec;  //计算经过的时间
	// printf("%f",timeuse/1000000.0);
	time_whole[3]+=Sunday_time;
	puts("");
	puts("");

	printf("%s", "BoyerMoore\t| ");
	gettimeofday(&start,NULL);
	match_5(head,str,0,findall);
	gettimeofday(&end,NULL);  //得到结束时间
	bm_time=1000000*(end.sec-start.sec)+end.usec-start.usec;  //计算经过的时间
	// printf("%f",timeuse/1000000.0);
	time_whole[4]+=bm_time;
	puts("");
	puts("");

	printf("%s","Shift-And\t| ");
	gettimeofday(&start,NULL);
	match_6(head->next,str,0,findall);
	gettimeofday(&end,NULL);  //得到结束时间
	shift_time=1000000*(end.sec-start.sec)+end.usec-start.usec;  //计算经过的时间
	// printf("%f",timeuse/1000000.0);
	time_whole[5]+=shift_time;
	puts("");
	puts("");

	//释放内存空间
	node* head_save=(node*)malloc(sizeof(node));
	while(head!=NULL){
		head_save=head->next;
		free(head);
		head=head_save;
	}

	//输出此次匹配所花的时间
	/*puts("time_use:");
	puts("algorithm\t|\ttime(s)");
	puts("-------------------------------------");
	printf("%s","Brute Force\t|\t");
	printf("%f\n",bf_time/1000000.0);

	printf("%s","KMP\t\t|\t");
	printf("%f\n",kmp_time/1000000.0);

	printf("%s","Horspool\t|\t");
	printf("%f\n",Horspool_time/1000000.0);

	printf("%s","Sunday\t\t|\t");
	printf("%f\n",Sunday_time/1000000.0);

	printf("%s", "BoyerMoore\t|\t");
	printf("%f\n",bm_time/1000000.0);

	printf("%s","Shift-And\t|\t");
	printf("%f\n",shift_time/1000000.0);*/
}

void showresult(int test_times,cost *cost_p){
	puts("average_time_use:");
	puts("algorithm\t|\ttime(s)");
	puts("-------------------------------------");
	printf("%s","Brute Force\t|\t");
	// printf("%d\n",time_whole[0] );
	time_whole[0]/=test_times;     				//xiaomeng
	printf("%f\n",time_whole[0]/1000000.0);
	cost_p->time_bf=time_whole[0];


	printf("%s","KMP\t\t|\t");
	time_whole[1]/=test_times;
	printf("%f\n",time_whole[1]/1000000.0);
	cost_p->time_kmp=time_whole[1];

	printf("%s","Horspool\t|\t");
	time_whole[2]/=test_times;
	printf("%f\n",time_whole[2]/1000000.0);
	cost_p->time_horspool=time_whole[2];

	printf("%s","Sunday\t\t|\t");
	time_whole[3]/=test_times;
	printf("%f\n",time_whole[3]/1000000.0);
	cost_p->time_sunday=time_whole[3];

	printf("%s", "BoyerMoore\t|\t");
	time_whole[4]/=test_times;
	printf("%f\n",time_whole[4]/1000000.0);
	cost_p->time_bm=time_whole[4];

	printf("%s","Shift-And\t|\t");
	time_whole[5]/=test_times;
	printf("%f\n",time_whole[5]/1000000.0);
	cost_p->time_shift=time_whole[5];

	/*cost *temp;	
	temp=(cost*)malloc(sizeof(cost));  //保存当前位置匹配所花时间的平均值，与其他位置作比较
	temp->next=NULL;
	cost_p->next=temp;
	return temp;*/
}


/* name:Brute Force 
 * 没有依赖函数
 */

long match_1(node* head,char* str,long ppos,int findall,cost *cost_p){
	/*struct timeval start,end;
	gettimeofday(&start,NULL);  //得到开始时间*/
  	int  j=0;
	long pos=0;
	node *cur,*pre;
	cur=head;
	pre=head;
	int strlength=strlen(str);
	if(strlength>1000){
		printf("  over length!");
		return;
	}
	while(j<strlength&&cur->next!=NULL){
		if(str[j]==cur->ch){
			cur=cur->next;
			j++;
		}
		else{
			j=0;  //模式串回到第一个地府
			pos++;
			cur=pre->next;  //匹配串后退一个字符，继续进行比较
			pre=cur;  //保存当前位置
		}
			
	}
	if(j==strlength)
		printf("%d---",pos+ppos);
	printf("%d\n",place );
	if(place!=pos+ppos)
		cost_p->effective=0;
	//printf("%d\n",cost_p->effective );
	if(cur->next!=NULL&&findall)
		match_1(cur,str,ppos+pos+strlength,findall,cost_p);
	else if(findall) 
	 	printf("end of file!");
	/*gettimeofday(&end,NULL);  //得到结束时间
	long timeuse=1000000*(end.sec-start.sec)+end.usec-start.usec;  //计算经过的时间
	printf("%f",timeuse/1000000.0);*/
}

void get_next(char* str,int* next){
	// puts(str);
	int i=1,j=0,k=0;
	next[1]=0;
	int strlength = strlen(str);//得到字符串的长度
	char str_2[strlength+2]; //需要依次后移一位，并且考虑结束符，所以长度是srelentgth+2
	while(str_2[k+1]=str[k]){  //依次后移
		// putchar(str[k]);
		k++;
	}
	while(i<strlength){
		if(j==0||str_2[i]==str_2[j]){
			i++;
			j++;
			next[i]=j;
			// printf("%d ",next[i]);
		}
		else 
			j=next[j];
	}  //得到next数组
}


/*
 *KMP算法
 *依赖函数：get_next();
*/
long match_2(node* head,char* str,long ppos,int findall){
	// puts(str);
	/*struct timeval start,end;
	gettimeofday(&start,NULL);*/
	int i=0,j=1;
	long pos=0;  //记录累计移动的距离，加上传进来的参数ppos，就是模式串在匹配串中的位置
	node *cur,*pre;
	cur=head;
	pre=head;
	int strlength=strlen(str);
	int next[strlength+1];
	
	get_next(str,next);  //得到next数组
	while(j<=strlength&&cur->next!=NULL){  //开始匹配
		if(j==0||str[j-1]==cur->ch){ 
			cur=cur->next;		//如果相等，模式串和匹配串同时后移，进行下一个字符的匹配
			pos++;
			j++;
		}
		else{
			j=next[j];  //如果不想等，就通过next数组得到此时匹配串的那个字符应该和模式串中的哪个进行匹配
		}
	}
	if(j>strlength)     //匹配成功则j>strlength,然后输出模式串在匹配串中的位置
		printf("%d---",pos+ppos-strlength);
	if(cur->next!=NULL&&findall)
		match_2(cur,str,pos+ppos,findall);
	else if(findall)
		printf("end of file!");
	/*gettimeofday(&end,NULL);
	long timeuse=1000000*(end.sec-start.sec)+end.usec-start.usec;
	printf("%f",timeuse/1000000.0);*/
}

/*
 *movesteps()
 *移动链表指针，距离由参数传入
 *
*/
node* movesteps(node* head,int steps){
	int i;
	for(i=0;head!=NULL&&i<steps;i++){
		head=head->next;
	}
	return head;
}

/* name:Horspool 
 * 依赖函数：movesteps();
 */
long match_3(node* head,char* str,long ppos,int findall){
	/*struct timeval start,end;
	gettimeofday(&start,NULL);*/
	int  i=0,j,k;
	long pos=1;  
	node *cur;  
	char c;
	int strlength=strlen(str);
	//puts(str);
	if(strlength>1000){
		printf("  over length!");
		return;
	}
	//因为是从模式串的末尾开始匹配的，所以先将链表移动一个字符串长度的距离
	cur = movesteps(head,strlength);
	j=strlength-1;  //j指向字符串的最后一个字符
	while(j>=0&&cur!=NULL){
		if(str[j]==cur->ch){
			cur=cur->pre;
			i++;  //i记录字符匹配正确所移动的步数，便于其后如果出现不匹配字符的时候移动模式串
			j--;
		}
		else{
			c=cur->ch;
			while(j>=0&&str[j]!=c&&cur!=NULL){  //在模式串中寻找当前失配字符左边第一个与匹配串中的失配字符相同的字符的位置
				cur=cur->next;  //需要同时移动匹配串的指针使下一次能够正确地从模式串的末尾开始匹配
				pos++;  //记录移动的距离
				j--;
			}
			cur = movesteps(cur,i); //再移动已经匹配的距离，重新开始下一轮的匹配
			i=0;  //归零
			j=strlength-1;  //重新从末尾开始匹配
		}
	}
	//printf("%d\n",j );
	if(j<0)
		printf("%d---",pos+ppos);  //匹配成功
	if(cur!=NULL&&findall){
		cur=movesteps(cur,strlength);
		match_3(cur,str,pos+ppos+strlength-1,findall);
	}
	else if(findall)
		printf("end of file!");
	/*gettimeofday(&end,NULL);
	long timeuse=1000000*(end.sec-start.sec)+end.usec-start.usec;
	printf("%f",timeuse/1000000.0);*/
	/* if(cur!=NULL)
		match_3(cur->next,str,pos+ppos);
	else 
		return; */
}

/* name:Sunday
 * 依赖函数movesteps();
 */

/*long match_4(node* head,char* str,long ppos,int findall){
	//puts(str);
	int  i=0,j=0;
	long pos=1;  
	node *cur,*cur_save,*next;  
	char c;
	int strlength=strlen(str);
	//puts(str);
	// printf("%d\n",strlength);
	if(strlength>1000){
		printf("  over length!");
		return;
	}
	cur=(node*)malloc(sizeof(node));
	cur=head->next;
	next=(node*)malloc(sizeof(node));
	cur_save=(node*)malloc(sizeof(node));
	// putchar(cur->ch);
	while(j<strlength&&cur!=NULL){
		if(str[j]==cur->ch){
			cur=cur->next;  
			i++;
			j++;
			pos++;
		}
		else{
			cur_save=cur;
			next = movesteps(cur,strlength-i);  //出现失配时，匹配串后移一位，然后在模式串中寻找最右边与下一个字符相同的字符的位置
			if(next==NULL){
				cur=NULL;
				break;   //如果到末尾则退出
			}
			j=strlength-1;
			while(j>=0&&str[j]!=next->ch){
				j--;
			} //在模式串中寻找最右边与匹配串中下一个字符相同的字符的位置
			cur=movesteps(cur_save,strlength-j); //重新对齐然后开始从左往右匹配
			pos+=strlength-j;
			i=0;
			j=0;
		}
	}
	
	if(j==strlength)
		printf("%d---",pos+ppos-strlength);
	if(cur!=NULL&&findall){
		match_4(cur->pre->pre,str,pos+ppos-2,findall);
	}
	else if(findall)
		printf("end of file!");    //不能全部匹配成功
}
*/
long match_4(node* head,char* str,long ppos,int findall){
	int  i=0,j,k;
	long pos=1;  
	node *cur;  
	char c;
	int strlength=strlen(str);
	if(strlength>1000){
		printf("  over length!");
		return;
	}
	cur = movesteps(head,strlength);//从末尾开始匹配，所以先移动一个字符串的距离
	j=strlength-1;  //模式串从末尾开始匹配
	while(j>=0&&cur!=NULL){
		if(str[j]==cur->ch){
			cur=cur->pre;   //与Horspool一样
			i++;
			j--;
		}
		else{
			cur = movesteps(cur,i+1);  //出现失配时，匹配串后移一位，然后在模式串中寻找最右边与下一个字符相同的字符的位置
			pos++;  //距离计数加一
			i=0;
			if(cur==NULL)
				break;   //如果到末尾则退出
			j=strlength-1;
			while(j>=0&&str[j]!=cur->ch){
				j--;
			} //在模式串中寻找最右边与匹配串中下一个字符相同的字符的位置
			cur=movesteps(cur,strlength-j-1);
			pos=pos+strlength-j-1;  //距离计数
			j=strlength-1;  //重新从末尾开始匹配
		}
	}
	
	if(j<0)
		printf("%d---",pos+ppos);
	if(cur!=NULL&&findall){
		cur=movesteps(cur,strlength);	
		match_4(cur,str,pos+ppos+strlength-1,findall);
	}
	else if(findall)
		printf("end of file!");
}

/*
 *BoyerMoore 坏字符数组
 *
*/
void get_bmbc(char* str,int* bmbc){
	int i;
	char c;
	int strlength = strlen(str);
	for(i=0;i<128;i++){
		bmbc[i]=strlength;
	}  //模式串中不存在的字符，移动距离为一个字符串的长度
	for(i=0;i<strlength;i++){
		c=str[i];
		bmbc[c]=strlength-i;  //坏字符数组下标是字符，数值是模式串中最靠右的该字符到右端的距离
		// printf("[%c]%d\n", c,bmbc[c]);
	}
}

/*
 *BoyerMoore 好后缀数组
 *
*/
void get_bmgs(char* str,int* bmgs){
	int i,j,p;
	int strlength = strlen(str);
	int suff[strlength];  //需要辅助数组suff[]，suff[]为以i为右边界, 与模式串后缀匹配的最大长度
	suff[strlength-1]=strlength;   //最后一个字符显然suff[]=strlength
	for(i=strlength-2;i>=0;i--){
		p=i;
		while(p>=0&&str[p]==str[strlength-1-i+p]){
			p--;
		}
		suff[i]=i-p;  //得到suff[]
	}
	// puts("suff:");
	/*for(i=0;i<strlength;i++){
		printf("suff[%d]%d\n", i,suff[i]);
	}*/
	//计算bmgs[]
	// puts("bmgs:");
	for(j=0;j<strlength;j++){
		bmgs[j]=strlength-1;		
	}  //没有匹配的好后缀时，移动的距离为strlength-1
	for(j=0;j<strlength-1;j++){
		bmgs[strlength-1-suff[j]]=strlength-1-j;	//得到bmgs[];	
		//printf("[%d]%d\n",strlength-1-suff[j],strlength-1-j );
	}
}

/*
 *BoyerMoore 依赖函数
 *比较好后缀与坏字符数组的大小，返回较大的那个数
*/
int max(int a,int b){
	return a>b?a:b;
}

/*
 *BoyerMoore 算法
 *依赖函数：get_bmgs(),get_bmbc(),max();
 *movesteps();
 */
long match_5(node* head,char* str,long ppos,int findall){
	/*struct timeval start,end;
	gettimeofday(&start,NULL);*/
	int  i=0,j,k;
	long pos=1;  //从当前位置开始计数，然后加上传进来的起始位置ppos
	node *cur; 
	char c;
	int strlength=strlen(str);
	int bmbc[128];  
	int bmgs[strlength];
	get_bmbc(str,bmbc);   //得到好后缀数组
	get_bmgs(str,bmgs);   //得到坏字符数组
	/*for(i=0;i<strlength;i++){
		printf("%c%d ",str[i],bmbc[str[i]] );
	}
	puts(" ");
	for(i=0;i<strlength;i++){
		printf("%3d",bmgs[i] );
	}*/

	//从后往前匹配，所以先往后移动一个模式串的长度
	cur = movesteps(head,strlength);
	if(cur==NULL){
		printf("end of file!");	
		return;  //如果已经到末尾了，则退出
	}
	j=strlength-1;  //最后一个字符
	while(j>=0){
		if(str[j]==cur->ch){
			cur=cur->pre;  //如果匹配则继续往前匹配前一个字符
			i++;
			j--;
		}
		else{
			c=cur->ch;   //不匹配时
			i+=max(bmbc[str[j]],bmgs[j]); //得到移动距离，为好后缀与坏字符数组中较大的那个，并加上先前已经匹配的那段距离i
			pos+=max(bmbc[str[j]],bmgs[j]);  //距离计数，不需要加上i
			cur=movesteps(cur,i);		///移动匹配串
			if(cur==NULL){
				printf("end of file!");
				break;
			}
			// putchar(cur->ch);
			i=0;		//归零
			j=strlength-1; //重新从末尾开始匹配
		}
	}
	if(j<0)
		printf("%d---",pos+ppos);
	if(cur!=NULL&&findall){
		cur=movesteps(cur,strlength);	
		match_5(cur,str,pos+ppos+strlength-1,findall);
	}
	/*else 
		printf("end of file! / ");*/
	/*gettimeofday(&end,NULL);
	long timeuse=1000000*(end.sec-start.sec)+end.usec-start.usec;
	printf("%f",timeuse/1000000.0);*/
		//printf("find");
}




void get_b(char* str,int* B){
	int i,j;
	unsigned int shift=1;
	int strlength=strlen(str);
	for(i=0;i<strlength;i++){
		B[str[i]]|=shift;
		shift<<=1;
	}  //得到模式串中各个字符在模式串中的位置，由一个32位的二进制数来表示，存在的位置为1，不存在为0
	/*
	for(i=0;i<strlength;i++){
		printf("%c%x\n",str[i],B[str[i]]);
	}*/
}

/* name:Shift-And
 * 依赖函数：get_b();
 */
long match_6(node* head,char* str,long ppos,int findall){
	/*struct timeval start,end;
	gettimeofday(&start,NULL);*/
	int i;
	int B[128]={0};  //初始值为0
	long pos=1;
	int strlength=strlen(str);
	if(strlength>32){		//因为使用long类型来保存D，mask，所以最大的匹配长度为32位
		printf("  over length!");
		return;
	}
	long D=0,mask;
	mask = 1<<(strlength-1);  //得到标尺，当D与之相等的时候则匹配成功
	node* cur=head;
	get_b(str,B);		//得到辅助数组B
	while(cur!=NULL){
		D=(D<<1|1)&B[cur->ch];  //依次往后移动模式串，并更新D的数值
		cur=cur->next;
		pos++;
		if(D&mask)		//当D和mask相等的时候，说明匹配成功
			break;
	}
	if(D&mask)
		printf("%d---",pos+ppos-strlength);
	if(cur!=NULL&&findall)
		match_6(cur,str,pos+ppos-1,findall);
	else if(findall)
		printf("end of file!");
	/*gettimeofday(&end,NULL);
	long timeuse=1000000*(end.sec-start.sec)+end.usec-start.usec;
	printf("%f",timeuse/1000000.0);*/
	/* if(cur!=NULL)
		match_6(cur,str,pos+ppos);
	else 
		return;
	 */  //通过递归寻找所有匹配的字符串
}